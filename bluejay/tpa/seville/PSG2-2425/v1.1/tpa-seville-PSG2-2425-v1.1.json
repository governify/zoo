{
    "id": "tpa-1010101010",
    "version": "1.1.0",
    "type": "agreement",
    "context": {
        "validity": {
            "initial": "2024-01-01",
            "timeZone": "America/Los_Angeles"
        },
        "definitions": {
            "schemas": {},
            "scopes": {
                "development": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    },
                    "member": {
                        "name": "Member",
                        "description": "Member",
                        "type": "string",
                        "default": "*"
                    }
                }
            },
            "collectors": {
                "eventcollector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                }
            },
            "dashboards": {
                "main": {
                    "base": "$_[infrastructure.internal.assets.default]/api/v1/public/grafana-dashboards/tpa/base.json",
                    "modifier": "$_[infrastructure.internal.assets.default]/api/v1/public/grafana-dashboards/tpa/modifier.js",
                    "overlay": "$_[infrastructure.internal.assets.default]/api/v1/public/grafana-dashboards/tpa/overlay.js",
                    "config": {
                        "configDashboard": true,
                        "blocks": {
                            "0": {
                                "type": "divider-github-states",
                                "config": {
                                    "title": "Dashboard PSG2-2425"
                                }
                            },
                            "1": {
                                "type": "gauge-period-time-correlation-notZero",
                                "guarantee": "CORRELATION_INPROGRESSISSUES_NEWBRANCH",
                                "config": {
                                    "scope-class": "2020202020",
                                    "x-axis-metric": "metric_COUNT_INPROGRESS_ISSUES",
                                    "y-axis-metric": "metric_COUNT_INPROGRESS_ISSUES_WITH_ASSOCIATED_BRANCHES",
                                    "not-zero-metric": "metric_COUNT_INPROGRESS_ISSUES",
                                    "time-graph-title": "Correlation between issues in the 'In Progress' column with associated branches and issues in the 'In Progress' column"
                                }
                            },
                            "2": {
                                "type": "gauge-period-time-correlation-notZero",
                                "guarantee": "CORRELATION_BRANCHESASSOCIATED_INPROGRESSISSUES",
                                "config": {
                                    "scope-class": "2020202020",
                                    "x-axis-metric": "metric_COUNT_INPROGRESS_ISSUES",
                                    "y-axis-metric": "metric_COUNT_BRANCHES_ASSOCIATED_TO_INPROGRESS_ISSUES",
                                    "not-zero-metric": "metric_COUNT_INPROGRESS_ISSUES",
                                    "time-graph-title": "Correlation between number of different branches associated to issues in the 'In Progress' column and issues in the 'In Progress' column"
                                }
                            },
                            "3": {
                                "type": "gauge-period-time-correlation-notZero",
                                "guarantee": "CORRELATION_INREVIEWISSUES_OPENPR",
                                "config": {
                                    "scope-class": "2020202020",
                                    "x-axis-metric": "metric_COUNT_INREVIEW_ISSUES",
                                    "y-axis-metric": "metric_COUNT_INREVIEW_ISSUES_WITH_ASSOCIATED_OPEN_PR",
                                    "not-zero-metric": "metric_COUNT_INREVIEW_ISSUES",
                                    "time-graph-title": "Correlation between issues in the 'In Review' column with associated open pull requests and issues in the 'In Review' column"
                                }
                            },
                            "4": {
                                "type": "gauge-period-time-correlation-notZero",
                                "guarantee": "CORRELATION_DONEISSUES_MERGEDPR",
                                "config": {
                                    "scope-class": "2020202020",
                                    "x-axis-metric": "metric_COUNT_DONE_ISSUES",
                                    "y-axis-metric": "metric_COUNT_DONE_ISSUES_WITH_ASSOCIATED_CLOSED_PR",
                                    "not-zero-metric": "metric_COUNT_DONE_ISSUES",
                                    "time-graph-title": "Correlation between issues in the 'Done' column with associated merged pull requests and issues in the 'Done' column"
                                }
                            },
                            "5": {
                                "type": "time-graph2-member",
                                "guarantee": "NUMBER_INPROGRESSISSUES_HOURLY_UNDER_1",
                                "config": {
                                    "scope-class": "2020202020",
                                    "time-graph-title": "Number of issues in the 'In Progress' column"
                                }
                            },
                            "6": {
                                "type": "time-graph2-member-groupby",
                                "guarantee": "NUMBER_DONEISSUES_WEEKLY_OVER_1",
                                "config": {
                                    "scope-class": "2020202020",
                                    "time-graph-title": "Number of issues in the 'Done' column",
                                    "time-interval": "1w",
                                    "aggregation": "sum"
                                }
                            },
                            "7": {
                                "type": "gauge-period-time-correlation-notZero",
                                "guarantee": "CORRELATION_APPROVEDMERGEDPULLREQUEST_TOTALMERGEDPULLREQUEST_TEAM",
                                "config": {
                                    "scope-class": "2020202020",
                                    "x-axis-metric": "metric_COUNT_PR_MERGED_TEAM",
                                    "y-axis-metric": "metric_COUNT_MERGED_PR_WITH_POSITIVE_REVIEWS_TEAM",
                                    "not-zero-metric": "metric_COUNT_PR_MERGED_TEAM",
                                    "time-graph-title": "Correlation between GH merged PR with at least one positive review and GH merged PR by team"
                                }
                            },
                            "8": {
                                "type": "time-graph2-member-notZero",
                                "guarantee": "CORRELATION_APPROVEDMERGEDPULLREQUEST_TOTALMERGEDPULLREQUEST_MEMBER",
                                "config": {
                                    "scope-class": "2020202020",
                                    "not-zero-metric": "metric_COUNT_PR_MERGED_MEMBER",
                                    "time-graph-title": "Correlation between GH merged PR by a member with at least one positive review and GH merged PR by the same member"
                                }
                            },
                            "9": {
                                "type": "time-graph2-member",
                                "guarantee": "NUMBER_APPROVEDMERGEDPULLREQUEST_MEMBER",
                                "config": {
                                    "scope-class": "2020202020",
                                    "time-graph-title": "Number of GH merged PR by a member with at least one positive review "
                                }
                            },
                            "10": {
                                "type": "time-graph2-member-notZero",
                                "guarantee": "CORRELATION_COUNTPRSWITHATLEASTONECOMMENTORONEREVIEWCOMMENTBYMEMBER_AND_COUNTPR",
                                "config": {
                                    "scope-class": "2020202020",
                                    "not-zero-metric": "metric_COUNT_PR",
                                    "time-graph-title": "Percentage of open pull requests with comments (including positive reviews) from non-creators in relation to open pull requests from different members"
                                }
                            },
                            "11": {
                                "type": "time-graph2-member",
                                "guarantee": "NUMBER_COUNTPRSWITHATLEASTONECOMMENTORONEREVIEWCOMMENTBYMEMBER",
                                "config": {
                                    "scope-class": "2020202020",
                                    "time-graph-title": "Number of open pull requests with comments (including positive reviews) from non-creators"
                                }
                            }
                        }
                    },
                    "notifications": {}
                },
                "infrastructure": {}
            }
        }
    },
    "terms": {
        "metrics": {
            "COUNT_INPROGRESS_ISSUES": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get in progress issues",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(owner: \"%PROJECT.github.repoOwner%\", name: \"%PROJECT.github.repository%\") {\r\n    projectsV2(first: 5) {\r\n      nodes {\r\n        items(first: 100) {\r\n          nodes {\r\n            content {\r\n              ... on Issue {\r\n                title\r\n                bodyText\r\n                updatedAt\r\n                assignees(first:10){\r\n                  nodes{\r\n                    login\r\n                  }\r\n                }\r\n                createdAt\r\n                number\r\n                linkedBranches(first:10){\r\n                  totalCount\r\n                  nodes{\r\n                    ref{\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                author {\r\n                  login\r\n                }\r\n              }\r\n            }\r\n            fieldValues(first: 10) {\r\n              nodes {\r\n                ... on ProjectV2ItemFieldRepositoryValue {\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                  repository {\r\n                    nameWithOwner\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldTextValue {\r\n                  text\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldSingleSelectValue {\r\n                  name\r\n                  updatedAt\r\n                  creator {\r\n                    login\r\n                  }\r\n                  field {\r\n                    ... on ProjectV2SingleSelectField {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getInProgressIssues(inputData, variables) {\r\n    inputData.data.repository.projectsV2.nodes.forEach(project => {\r\n        project.items.nodes = project.items.nodes.filter(item => \r\n            item.fieldValues.nodes.some(fieldValue => \r\n                (fieldValue?.field?.name === \"Status\" && fieldValue?.name === \"In Progress\")\r\n            )\r\n        );\r\n    });\r\n    return inputData;\r\n}"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function func(inputData, variables) {\r\n    let result = [];\r\n    for(let project of inputData.data.repository.projectsV2.nodes){\r\n        for(let projectItem of project.items.nodes){\r\n            result.push(projectItem);\r\n        }\r\n    }\r\n    return result\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_INPROGRESS_ISSUES_WITH_ASSOCIATED_BRANCHES": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get in progress issues with associated branches",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(owner: \"%PROJECT.github.repoOwner%\", name: \"%PROJECT.github.repository%\") {\r\n    projectsV2(first: 5) {\r\n      nodes {\r\n        items(first: 100) {\r\n          nodes {\r\n            content {\r\n              ... on Issue {\r\n                title\r\n                bodyText\r\n                updatedAt\r\n                assignees(first:10){\r\n                  nodes{\r\n                    login\r\n                  }\r\n                }\r\n                createdAt\r\n                number\r\n                linkedBranches(first:10){\r\n                  totalCount\r\n                  nodes{\r\n                    ref{\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                author {\r\n                  login\r\n                }\r\n              }\r\n            }\r\n            fieldValues(first: 10) {\r\n              nodes {\r\n                ... on ProjectV2ItemFieldRepositoryValue {\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                  repository {\r\n                    nameWithOwner\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldTextValue {\r\n                  text\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldSingleSelectValue {\r\n                  name\r\n                  updatedAt\r\n                  creator {\r\n                    login\r\n                  }\r\n                  field {\r\n                    ... on ProjectV2SingleSelectField {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getInProgressIssues(inputData, variables) {\r\n    inputData.data.repository.projectsV2.nodes.forEach(project => {\r\n        project.items.nodes = project.items.nodes.filter(item => \r\n            item.fieldValues.nodes.some(fieldValue => \r\n                (fieldValue?.field?.name === \"Status\" && fieldValue?.name === \"In Progress\")\r\n            )\r\n        );\r\n    });\r\n    return inputData;\r\n}"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function func(inputData, variables) {\r\n    let result = [];\r\n    for(let project of inputData.data.repository.projectsV2.nodes){\r\n        for(let projectItem of project.items.nodes){\r\n            if (projectItem.content.linkedBranches?.totalCount > 0) {\r\n                result.push(projectItem);\r\n            }\r\n        }\r\n    }\r\n    return result\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_INREVIEW_ISSUES": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get in review issues",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(owner: \"%PROJECT.github.repoOwner%\", name: \"%PROJECT.github.repository%\") {\r\n    projectsV2(first: 5) {\r\n      nodes {\r\n        items(first: 100) {\r\n          nodes {\r\n            content {\r\n              ... on Issue {\r\n                title\r\n                createdAt\r\n                assignees(first:10){\r\n                  nodes{\r\n                    login\r\n                  }\r\n                }\r\n                bodyText\r\n                updatedAt\r\n                number\r\n                closedByPullRequestsReferences(first:10){\r\n                \ttotalCount\r\n                  nodes{\r\n                    state\r\n                    author{\r\n                      login\r\n                    }\r\n                    title\r\n                  }\r\n                }\t\r\n                author {\r\n                  login\r\n                }\r\n              }\r\n            }\r\n            fieldValues(first: 10) {\r\n              nodes {\r\n                ... on ProjectV2ItemFieldRepositoryValue {\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                  repository {\r\n                    nameWithOwner\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldTextValue {\r\n                  text\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldSingleSelectValue {\r\n                  name\r\n                  updatedAt\r\n                  creator {\r\n                    login\r\n                  }\r\n                  field {\r\n                    ... on ProjectV2SingleSelectField {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getInProgressIssues(inputData, variables) {\r\n    inputData.data.repository.projectsV2.nodes.forEach(project => {\r\n        project.items.nodes = project.items.nodes.filter(item => \r\n            item.fieldValues.nodes.some(fieldValue => \r\n                (fieldValue?.field?.name === \"Status\" && fieldValue?.name === \"In Review\")\r\n            )\r\n        );\r\n    });\r\n    return inputData;\r\n}"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function func(inputData, variables) {\r\n    let result = [];\r\n    for(let project of inputData.data.repository.projectsV2.nodes){\r\n        for(let projectItem of project.items.nodes){\r\n            result.push(projectItem);\r\n        }\r\n    }\r\n    return result\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_INREVIEW_ISSUES_WITH_ASSOCIATED_OPEN_PR": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get in review issues wiht associated open pull requests",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(owner: \"%PROJECT.github.repoOwner%\", name: \"%PROJECT.github.repository%\") {\r\n    projectsV2(first: 5) {\r\n      nodes {\r\n        items(first: 100) {\r\n          nodes {\r\n            content {\r\n              ... on Issue {\r\n                title\r\n                createdAt\r\n                assignees(first:10){\r\n                  nodes{\r\n                    login\r\n                  }\r\n                }\r\n                bodyText\r\n                updatedAt\r\n                number\r\n                closedByPullRequestsReferences(first:10){\r\n                \ttotalCount\r\n                  nodes{\r\n                    state\r\n                    author{\r\n                      login\r\n                    }\r\n                    title\r\n                  }\r\n                }\t\r\n                author {\r\n                  login\r\n                }\r\n              }\r\n            }\r\n            fieldValues(first: 10) {\r\n              nodes {\r\n                ... on ProjectV2ItemFieldRepositoryValue {\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                  repository {\r\n                    nameWithOwner\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldTextValue {\r\n                  text\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldSingleSelectValue {\r\n                  name\r\n                  updatedAt\r\n                  creator {\r\n                    login\r\n                  }\r\n                  field {\r\n                    ... on ProjectV2SingleSelectField {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getInProgressIssues(inputData, variables) {\r\n    inputData.data.repository.projectsV2.nodes.forEach(project => {\r\n        project.items.nodes = project.items.nodes.filter(item => \r\n            item.fieldValues.nodes.some(fieldValue => \r\n                (fieldValue?.field?.name === \"Status\" && fieldValue?.name === \"In Review\")\r\n            )\r\n        );\r\n    });\r\n    return inputData;\r\n}"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function func(inputData, variables) {\r\n    let result = [];\r\n    for(let project of inputData.data.repository.projectsV2.nodes){\r\n        for(let projectItem of project.items.nodes){\r\n            if (projectItem.content.closedByPullRequestsReferences?.totalCount > 0) {\r\n                for(let pullRequest of projectItem.content.closedByPullRequestsReferences.nodes){\r\n                    if(pullRequest.state === \"OPEN\"){\r\n                        result.push(projectItem);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_DONE_ISSUES": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get done issues",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(owner: \"%PROJECT.github.repoOwner%\", name: \"%PROJECT.github.repository%\") {\r\n    projectsV2(first: 5) {\r\n      nodes {\r\n        items(first: 100) {\r\n          nodes {\r\n            content {\r\n              ... on Issue {\r\n                title\r\n                createdAt\r\n                assignees(first:10){\r\n                  nodes{\r\n                    login\r\n                  }\r\n                }\r\n                bodyText\r\n                updatedAt\r\n                number\r\n                closedByPullRequestsReferences(first:10){\r\n                \ttotalCount\r\n                  nodes{\r\n                    state\r\n                    author{\r\n                      login\r\n                    }\r\n                    title\r\n                  }\r\n                }\t\r\n                author {\r\n                  login\r\n                }\r\n              }\r\n            }\r\n            fieldValues(first: 10) {\r\n              nodes {\r\n                ... on ProjectV2ItemFieldRepositoryValue {\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                  repository {\r\n                    nameWithOwner\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldTextValue {\r\n                  text\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldSingleSelectValue {\r\n                  name\r\n                  updatedAt\r\n                  creator {\r\n                    login\r\n                  }\r\n                  field {\r\n                    ... on ProjectV2SingleSelectField {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getInProgressIssues(inputData, variables) {\r\n    inputData.data.repository.projectsV2.nodes.forEach(project => {\r\n        project.items.nodes = project.items.nodes.filter(item => \r\n            item.fieldValues.nodes.some(fieldValue => \r\n                (fieldValue?.field?.name === \"Status\" && fieldValue?.name === \"Done\")\r\n            )\r\n        );\r\n    });\r\n    return inputData;\r\n}"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function func(inputData, variables) {\r\n    let result = [];\r\n    for(let project of inputData.data.repository.projectsV2.nodes){\r\n        for(let projectItem of project.items.nodes){\r\n            result.push(projectItem);\r\n        }\r\n    }\r\n    return result\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_DONE_ISSUES_WITH_ASSOCIATED_CLOSED_PR": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get done issues with associated closed pull requests",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(owner: \"%PROJECT.github.repoOwner%\", name: \"%PROJECT.github.repository%\") {\r\n    projectsV2(first: 5) {\r\n      nodes {\r\n        items(first: 100) {\r\n          nodes {\r\n            content {\r\n              ... on Issue {\r\n                title\r\n                createdAt\r\n                assignees(first:10){\r\n                  nodes{\r\n                    login\r\n                  }\r\n                }\r\n                bodyText\r\n                updatedAt\r\n                number\r\n                closedByPullRequestsReferences(first:10){\r\n                \ttotalCount\r\n                  nodes{\r\n                    state\r\n                    author{\r\n                      login\r\n                    }\r\n                    title\r\n                  }\r\n                }\t\r\n                author {\r\n                  login\r\n                }\r\n              }\r\n            }\r\n            fieldValues(first: 10) {\r\n              nodes {\r\n                ... on ProjectV2ItemFieldRepositoryValue {\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                  repository {\r\n                    nameWithOwner\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldTextValue {\r\n                  text\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldSingleSelectValue {\r\n                  name\r\n                  updatedAt\r\n                  creator {\r\n                    login\r\n                  }\r\n                  field {\r\n                    ... on ProjectV2SingleSelectField {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getInProgressIssues(inputData, variables) {\r\n    inputData.data.repository.projectsV2.nodes.forEach(project => {\r\n        project.items.nodes = project.items.nodes.filter(item => \r\n            item.fieldValues.nodes.some(fieldValue => \r\n                (fieldValue?.field?.name === \"Status\" && fieldValue?.name === \"Done\")\r\n            )\r\n        );\r\n    });\r\n    return inputData;\r\n}"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function func(inputData, variables) {\r\n    let result = [];\r\n    for(let project of inputData.data.repository.projectsV2.nodes){\r\n        for(let projectItem of project.items.nodes){\r\n            if (projectItem.content.closedByPullRequestsReferences?.totalCount > 0) {\r\n                for(let pullRequest of projectItem.content.closedByPullRequestsReferences.nodes){\r\n                    if(pullRequest.state === \"MERGED\"){\r\n                        result.push(projectItem);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_BRANCHES_ASSOCIATED_TO_INPROGRESS_ISSUES": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get branches associated to in progress issues",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(owner: \"%PROJECT.github.repoOwner%\", name: \"%PROJECT.github.repository%\") {\r\n    projectsV2(first: 5) {\r\n      nodes {\r\n        items(first: 100) {\r\n          nodes {\r\n            content {\r\n              ... on Issue {\r\n                title\r\n                bodyText\r\n                updatedAt\r\n                assignees(first:10){\r\n                  nodes{\r\n                    login\r\n                  }\r\n                }\r\n                createdAt\r\n                number\r\n                linkedBranches(first:10){\r\n                  totalCount\r\n                  nodes{\r\n                    ref{\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                author {\r\n                  login\r\n                }\r\n              }\r\n            }\r\n            fieldValues(first: 10) {\r\n              nodes {\r\n                ... on ProjectV2ItemFieldRepositoryValue {\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                  repository {\r\n                    nameWithOwner\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldTextValue {\r\n                  text\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldSingleSelectValue {\r\n                  name\r\n                  updatedAt\r\n                  creator {\r\n                    login\r\n                  }\r\n                  field {\r\n                    ... on ProjectV2SingleSelectField {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getInProgressIssues(inputData, variables) {\r\n    inputData.data.repository.projectsV2.nodes.forEach(project => {\r\n        project.items.nodes = project.items.nodes.filter(item => \r\n            item.fieldValues.nodes.some(fieldValue => \r\n                (fieldValue?.field?.name === \"Status\" && fieldValue?.name === \"In Progress\")\r\n            )\r\n        );\r\n    });\r\n    return inputData;\r\n}"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function func(inputData, variables) {\r\n    let result = [];\r\n    for(let project of inputData.data.repository.projectsV2.nodes){\r\n        for(let projectItem of project.items.nodes){\r\n            for(let branch of projectItem.content.linkedBranches.nodes){\r\n                if (!result.some(item => item.ref.name === branch.ref.name)) {\r\n                    result.push(branch);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_INPROGRESSISSUES_MEMBER": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get issues in progress",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{repository(name: \"%PROJECT.github.repository%\", owner: \"%PROJECT.github.repoOwner%\") {\r\n    projectsV2(first: 5) {\r\n      nodes {\r\n        items(first: 100) {\r\n          nodes {\r\n            content {\r\n              ... on Issue {\r\n                bodyText\r\n                updatedAt\r\n                number\r\n                author {\r\n                  login\r\n                }\r\n                assignees(first: 5  ) {\r\n                    nodes {\r\n                        login\r\n                    }\r\n                }\r\n              }\r\n            }\r\n            fieldValues(first: 100) {\r\n              nodes {\r\n                ... on ProjectV2ItemFieldUserValue {\r\n                    field {\r\n                        ... on ProjectV2Field {\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n                ... on ProjectV2ItemFieldRepositoryValue {\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                  repository {\r\n                    nameWithOwner\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldTextValue {\r\n                  text\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldMilestoneValue {\r\n                    field {\r\n                        ... on ProjectV2Field {\r\n                            name\r\n                        }\r\n                    }\r\n                    milestone {\r\n                        number\r\n                        title \r\n                    }\r\n                }\r\n                ... on ProjectV2ItemFieldSingleSelectValue {\r\n                  name\r\n                  updatedAt\r\n                  creator {\r\n                    login\r\n                  }\r\n                  field {\r\n                    ... on ProjectV2SingleSelectField {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "objectGetSubObjects",
                                        "location": "data.repository.projectsV2.nodes.0.items.nodes"
                                    },
                                    "2": {
                                        "type": "objectsFilterObjects",
                                        "filters": [
                                            "content.assignees.nodes.*any*.login == '%MEMBER.github.username%'"
                                        ]
                                    },
                                    "3": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getFieldValues(inputData, variables) {\r\n    let result = [];\r\n    for (const issue of inputData) {\r\n        for (const fieldValue of issue.fieldValues.nodes) {\r\n            if (fieldValue.name === 'In Progress') {\r\n                               result.push(issue);\r\n                \r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"
                                    }
                                }
                            }
                        }
                    }
                },
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    }
                }
            },
            "COUNT_DONEISSUES_MEMBER": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get done issues",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{repository(name: \"%PROJECT.github.repository%\", owner: \"%PROJECT.github.repoOwner%\") {\r\n    projectsV2(first: 5) {\r\n      nodes {\r\n        items(first: 100) {\r\n          nodes {\r\n            content {\r\n              ... on Issue {\r\n                bodyText\r\n                updatedAt\r\n                number\r\n                author {\r\n                  login\r\n                }\r\n                assignees(first: 5  ) {\r\n                    nodes {\r\n                        login\r\n                    }\r\n                }\r\n              }\r\n            }\r\n            fieldValues(first: 100) {\r\n              nodes {\r\n                ... on ProjectV2ItemFieldUserValue {\r\n                    field {\r\n                        ... on ProjectV2Field {\r\n                            name\r\n                        }\r\n                    }\r\n                }\r\n                ... on ProjectV2ItemFieldRepositoryValue {\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                  repository {\r\n                    nameWithOwner\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldTextValue {\r\n                  text\r\n                  field {\r\n                    ... on ProjectV2Field {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n                ... on ProjectV2ItemFieldMilestoneValue {\r\n                    field {\r\n                        ... on ProjectV2Field {\r\n                            name\r\n                        }\r\n                    }\r\n                    milestone {\r\n                        number\r\n                        title \r\n                    }\r\n                }\r\n                ... on ProjectV2ItemFieldSingleSelectValue {\r\n                  name\r\n                  updatedAt\r\n                  creator {\r\n                    login\r\n                  }\r\n                  field {\r\n                    ... on ProjectV2SingleSelectField {\r\n                      name\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getDoneIssues(inputData, variables) {\r\n    return inputData.data.repository.projectsV2.nodes.map(project => project.items.nodes).flat()\r\n}"
                                    },
                                    "2": {
                                        "type": "objectsFilterObjects",
                                        "filters": [
                                            "content.assignees.nodes.*any*.login == '%MEMBER.github.username%'"
                                        ]
                                    },
                                    "3": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getFieldValues(inputData, variables) {\r\n    let result = [];\r\n    for (const issue of inputData) {\r\n        for (const fieldValue of issue.fieldValues.nodes) {\r\n            if (fieldValue.name === 'Done') {\r\n                if (new Date(fieldValue.updatedAt) > new Date(variables.from) && new Date(fieldValue.updatedAt) < new Date(variables.to)) {\r\n                    result.push(issue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_MERGED_PR_WITH_POSITIVE_REVIEWS_TEAM": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get merged PRs with at least one positive review",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner:\"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100, states: MERGED) {\r\n      nodes {\r\n        state\r\n        title\r\n        body\r\n        baseRefName\r\n        headRefName\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n        reviews(first: 10) {\r\n          totalCount\r\n          nodes {\r\n            createdAt\r\n            state\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "objectGetSubObjects",
                                        "location": "data.repository.pullRequests.nodes"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getReviews(inputData, variables) {\r\n    let res = [];\r\n    for (let pullRequest of inputData) {\r\n        if (new Date(pullRequest.mergedAt) > new Date(variables.from) && new Date(pullRequest.mergedAt) < new Date(variables.to) && pullRequest.reviews.nodes.some(review => review.state === 'APPROVED')) {\r\n            res.push(pullRequest);\r\n        }\r\n    }\r\n    return res;\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_PR_MERGED_TEAM": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get merged PRs",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner:\"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100, states: MERGED) {\r\n      nodes {\r\n        state\r\n        title\r\n        body\r\n        baseRefName\r\n        headRefName\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n        reviews(first: 10) {\r\n          totalCount\r\n          nodes {\r\n            createdAt\r\n            state\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "objectGetSubObjects",
                                        "location": "data.repository.pullRequests.nodes"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getPullRequests(inputData, variables) {\r\n    let res = [];\r\n    for (let pullRequest of inputData) {\r\n        if (new Date(pullRequest.mergedAt) > new Date(variables.from) && new Date(pullRequest.mergedAt) < new Date(variables.to)) {\r\n            res.push(pullRequest);\r\n        }\r\n    }\r\n    return res;\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_MERGED_PR_WITH_POSITIVE_REVIEWS_MEMBER": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get merged PRs with at least one positive review",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner:\"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100, states: MERGED) {\r\n      nodes {\r\n        state\r\n        title\r\n        body\r\n        baseRefName\r\n        headRefName\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n        reviews(first: 10) {\r\n          totalCount\r\n          nodes {\r\n            createdAt\r\n            state\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "objectGetSubObjects",
                                        "location": "data.repository.pullRequests.nodes"
                                    },
                                    "2": {
                                        "type": "objectsFilterObjects",
                                        "filters": [
                                            "mergedBy.login == '%MEMBER.github.username%'"
                                        ]
                                    },
                                    "3": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getReviews(inputData, variables) {\r\n    let res = [];\r\n    for (let pullRequest of inputData) {\r\n        if (new Date(pullRequest.mergedAt) > new Date(variables.from) && new Date(pullRequest.mergedAt) < new Date(variables.to) && pullRequest.reviews.nodes.some(review => review.state === 'APPROVED')) {\r\n            res.push(pullRequest);\r\n        }\r\n    }\r\n    return res;\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_PR_MERGED_MEMBER": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get merged PRs",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner:\"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100, states: MERGED) {\r\n      nodes {\r\n        state\r\n        title\r\n        body\r\n        baseRefName\r\n        headRefName\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n        reviews(first: 10) {\r\n          totalCount\r\n          nodes {\r\n            createdAt\r\n            state\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                                        "cache": true
                                    },
                                    "1": {
                                        "type": "objectGetSubObjects",
                                        "location": "data.repository.pullRequests.nodes"
                                    },
                                    "2": {
                                        "type": "objectsFilterObjects",
                                        "filters": [
                                            "mergedBy.login == '%MEMBER.github.username%'"
                                        ]
                                    },
                                    "3": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getReviews(inputData, variables) {\r\n    let res = [];\r\n    for (let pullRequest of inputData) {\r\n        if (new Date(pullRequest.mergedAt) > new Date(variables.from) && new Date(pullRequest.mergedAt) < new Date(variables.to)) {\r\n            res.push(pullRequest);\r\n        }\r\n    }\r\n    return res;\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_PRS_WITH_AT_LEAST_ONE_COMMENT_OR_ONE_REVIEW_COMMENT_BY_MEMBER": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get pull requests with at least one comment by member",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner: \"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100) {\r\n      pageInfo {\r\n        endCursor\r\n        hasNextPage\r\n      }\r\n      nodes {\r\n        bodyText\r\n        number\r\n        state\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n        comments(first: 50) {\r\n          nodes {\r\n            author {\r\n              login\r\n            }\r\n            bodyText\r\n            createdAt\r\n          }\r\n        }\r\n        reviews(first: 30) {\r\n          nodes {\r\n            state\r\n            createdAt\r\n            bodyText\r\n            author {\r\n              login\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
                                    },
                                    "1": {
                                        "type": "objectGetSubObjects",
                                        "location": "data.repository.pullRequests.nodes"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getPullRequestsWithAtLeastOneCommentByMember(inputData,variables)  {\r\n    let pullRequestsMergedAndOpenWithAtLeastOneComment = []\r\n    for (let pullRequest of inputData) {\r\n\r\n        if (pullRequest.author.login === '%MEMBER.github.username%') continue;\r\n\r\n        let isPullRequestAlreadyAdded = false;\r\n\r\n        if (pullRequest.state === 'OPEN' || pullRequest.state === 'MERGED' && Math.max(new Date(variables.from), new Date(pullRequest.createdAt)) <= Math.min(new Date(variables.to), new Date(pullRequest.mergedAt))) {\r\n            for (let comment of pullRequest.comments.nodes) {\r\n                if (comment.author.login === '%MEMBER.github.username%' && new Date(comment.createdAt) > new Date(variables.from) && new Date(comment.createdAt) < new Date(variables.to)) {\r\n                    pullRequestsMergedAndOpenWithAtLeastOneComment.push(pullRequest)\r\n                    isPullRequestAlreadyAdded = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isPullRequestAlreadyAdded) continue;\r\n\r\n            for (let review of pullRequest.reviews.nodes) {\r\n                if (review.bodyText.length > 0 && review.author.login === '%MEMBER.github.username%' && new Date(review.createdAt) > new Date(variables.from) && new Date(review.createdAt) < new Date(variables.to)) {\r\n                    pullRequestsMergedAndOpenWithAtLeastOneComment.push(pullRequest)\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return pullRequestsMergedAndOpenWithAtLeastOneComment;\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            },
            "COUNT_PR": {
                "collector": {
                    "infrastructurePath": "internal.collector.events",
                    "endpoint": "/api/v2/computations",
                    "type": "POST-GET-V1",
                    "config": {
                        "scopeManager": "$_[infrastructure.internal.scopes.default]/api/v1/scopes/development"
                    }
                },
                "measure": {
                    "computing": "actual",
                    "element": "number",
                    "event": {
                        "githubGQL": {
                            "custom": {
                                "type": "graphQL",
                                "title": "Get pull request",
                                "steps": {
                                    "0": {
                                        "type": "queryGetObject",
                                        "query": "{\r\n  repository(name: \"%PROJECT.github.repository%\", owner: \"%PROJECT.github.repoOwner%\") {\r\n    pullRequests(first: 100) {\r\n      nodes {\r\n        number\r\n        title\r\n        bodyText\r\n        state\r\n        createdAt\r\n        author {\r\n          login\r\n        }\r\n        mergedAt\r\n        mergedBy {\r\n          login\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
                                    },
                                    "1": {
                                        "type": "objectGetSubObjects",
                                        "location": "data.repository.pullRequests.nodes"
                                    },
                                    "2": {
                                        "type": "runScript",
                                        "variables": {},
                                        "script": "module.exports.generic = function getPullRequests(inputData,variables)  {\r\n    return inputData.filter(pullRequest => {\r\n        if (pullRequest.author.login !== '%MEMBER.github.username%' && (pullRequest.state === 'OPEN' || pullRequest.state === 'MERGED' && Math.max(new Date(variables.from), new Date(pullRequest.createdAt)) <= Math.min(new Date(variables.to), new Date(pullRequest.mergedAt)))) {\r\n            return pullRequest;\r\n        }\r\n    })\r\n}"
                                    }
                                }
                            }
                        }
                    },
                    "scope": {
                        "project": {
                            "name": "Project",
                            "description": "Project",
                            "type": "string",
                            "default": "1010101010"
                        },
                        "class": {
                            "name": "Class",
                            "description": "Group some Projects",
                            "type": "string",
                            "default": "2020202020"
                        }
                    }
                }
            }
        },
        "guarantees": [
            {
                "id": "CORRELATION_INPROGRESSISSUES_NEWBRANCH",
                "notes": "#### Description\r\n```\r\nTP-1: At least 75% of 'In Progress' issues must match creation of a branch.",
                "description": "When an issue is moved to In Progress, a branch associated to this issue must be created.",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    }
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010"
                        },
                        "objective": "(COUNT_INPROGRESS_ISSUES_WITH_ASSOCIATED_BRANCHES/COUNT_INPROGRESS_ISSUES*100) >= 75",
                        "with": {
                            "COUNT_INPROGRESS_ISSUES_WITH_ASSOCIATED_BRANCHES": {},
                            "COUNT_INPROGRESS_ISSUES": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "hourly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            },
            {
                "id": "CORRELATION_BRANCHESASSOCIATED_INPROGRESSISSUES",
                "notes": "#### Description\r\n```\r\nTP-2: At least 75% of 'In Progress' issues must have different branches associated.",
                "description": "When an issue is moved to In Progress, a branch associated to this issue must be created.",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    }
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010"
                        },
                        "objective": "(COUNT_BRANCHES_ASSOCIATED_TO_INPROGRESS_ISSUES/COUNT_INPROGRESS_ISSUES*100) >= 75",
                        "with": {
                            "COUNT_BRANCHES_ASSOCIATED_TO_INPROGRESS_ISSUES": {},
                            "COUNT_INPROGRESS_ISSUES": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "hourly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            },
            {
                "id": "CORRELATION_INREVIEWISSUES_OPENPR",
                "notes": "#### Description\r\n```\r\nTP-3: At least 75% of 'In Review' issues must match creation of a Pull Request.",
                "description": "When an issue is moved to In Review, a Pull Request associated to that issue must be created.",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    }
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010"
                        },
                        "objective": "(COUNT_INREVIEW_ISSUES_WITH_ASSOCIATED_OPEN_PR/COUNT_INREVIEW_ISSUES*100) >= 75",
                        "with": {
                            "COUNT_INREVIEW_ISSUES_WITH_ASSOCIATED_OPEN_PR": {},
                            "COUNT_INREVIEW_ISSUES": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "hourly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            },
            {
                "id": "CORRELATION_DONEISSUES_MERGEDPR",
                "notes": "#### Description\r\n```\r\nTP-4: At least 75% of 'Done' issues must match merge of a Pull Request.",
                "description": "When an issue is moved to Done, the Pull Request associated to the issue must be merge.",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    }
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010"
                        },
                        "objective": "(COUNT_DONE_ISSUES_WITH_ASSOCIATED_CLOSED_PR/COUNT_DONE_ISSUES*100) >= 75",
                        "with": {
                            "COUNT_DONE_ISSUES_WITH_ASSOCIATED_CLOSED_PR": {},
                            "COUNT_DONE_ISSUES": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "hourly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            },
            {
                "id": "NUMBER_INPROGRESSISSUES_HOURLY_UNDER_1",
                "notes": "#### Description\r\n```\r\nTP-1: At most 1 in progress issue every hour.",
                "description": "A developer should only be working on one issue at a time",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    },
                    "member": "*"
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010",
                            "member": "*"
                        },
                        "objective": "COUNT_INPROGRESSISSUES_MEMBER <= 1",
                        "with": {
                            "COUNT_INPROGRESSISSUES_MEMBER": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "hourly",
                            "initial": "2022-01-01"
                        }
                    }
                ]
            },
            {
                "id": "NUMBER_DONEISSUES_WEEKLY_OVER_1",
                "notes": "#### Description\r\n```\r\nTP-1: At least 1 done issue every week.",
                "description": "Each developer should be finishing at least 1 issue per week",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    },
                    "member": "*"
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010",
                            "member": "*"
                        },
                        "objective": "COUNT_DONEISSUES_MEMBER >= 1",
                        "with": {
                            "COUNT_DONEISSUES_MEMBER": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "weekly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            },
            {
                "id": "CORRELATION_APPROVEDMERGEDPULLREQUEST_TOTALMERGEDPULLREQUEST_TEAM",
                "notes": "#### Description\r\n```\r\nTP-1: At least 75% of the merged pull requests should have at least one positive review by team.",
                "description": "Most PRs should have positive reviews",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    }
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010"
                        },
                        "objective": "COUNT_MERGED_PR_WITH_POSITIVE_REVIEWS_TEAM/COUNT_PR_MERGED_TEAM * 100 >= 75",
                        "with": {
                            "COUNT_MERGED_PR_WITH_POSITIVE_REVIEWS_TEAM": {},
                            "COUNT_PR_MERGED_TEAM": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "weekly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            },
            {
                "id": "CORRELATION_APPROVEDMERGEDPULLREQUEST_TOTALMERGEDPULLREQUEST_MEMBER",
                "notes": "#### Description\r\n```\r\nTP-1: At least 75% of the merged pull requests should have at least one positive review by member.",
                "description": "Most of your PRs should end up with positive reviews",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    },
                    "member": "*"
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010",
                            "member": "*"
                        },
                        "objective": "COUNT_MERGED_PR_WITH_POSITIVE_REVIEWS_MEMBER/COUNT_PR_MERGED_MEMBER * 100 >= 75",
                        "with": {
                            "COUNT_MERGED_PR_WITH_POSITIVE_REVIEWS_MEMBER": {},
                            "COUNT_PR_MERGED_MEMBER": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "weekly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            },
            {
                "id": "NUMBER_APPROVEDMERGEDPULLREQUEST_MEMBER",
                "notes": "#### Description\r\n```\r\nTP-1: At least 1 merged pull request with at least one positive review by member.",
                "description": "Number of merged pull requests by a member with at least one positive review weekly",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    },
                    "member": "*"
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010",
                            "member": "*"
                        },
                        "objective": "COUNT_MERGED_PR_WITH_POSITIVE_REVIEWS_MEMBER >= 1",
                        "with": {
                            "COUNT_MERGED_PR_WITH_POSITIVE_REVIEWS_MEMBER": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "weekly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            },
            {
                "id": "CORRELATION_COUNTPRSWITHATLEASTONECOMMENTORONEREVIEWCOMMENTBYMEMBER_AND_COUNTPR",
                "notes": "#### Description\r\n```\r\nTP-1: At least 20% of the open pull requests should have at least one comment by member each week.",
                "description": "Most PRs should be either active or closed",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    },
                    "member": "*"
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010",
                            "member": "*"
                        },
                        "objective": "COUNT_PRS_WITH_AT_LEAST_ONE_COMMENT_OR_ONE_REVIEW_COMMENT_BY_MEMBER/COUNT_PR*100 >= 20",
                        "with": {
                            "COUNT_PRS_WITH_AT_LEAST_ONE_COMMENT_OR_ONE_REVIEW_COMMENT_BY_MEMBER": {},
                            "COUNT_PR": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "weekly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            },
            {
                "id": "NUMBER_COUNTPRSWITHATLEASTONECOMMENTORONEREVIEWCOMMENTBYMEMBER",
                "notes": "#### Description\r\n```\r\nTP-1: At least 1 open pull requests should have at least one comment by member each week.",
                "description": "Open PRs should be getting regular comments from other team members",
                "scope": {
                    "project": {
                        "name": "Project",
                        "description": "Project",
                        "type": "string",
                        "default": "1010101010"
                    },
                    "class": {
                        "name": "Class",
                        "description": "Group some Projects",
                        "type": "string",
                        "default": "2020202020"
                    },
                    "member": "*"
                },
                "of": [
                    {
                        "scope": {
                            "project": "1010101010",
                            "member": "*"
                        },
                        "objective": "COUNT_PRS_WITH_AT_LEAST_ONE_COMMENT_OR_ONE_REVIEW_COMMENT_BY_MEMBER >= 1",
                        "with": {
                            "COUNT_PRS_WITH_AT_LEAST_ONE_COMMENT_OR_ONE_REVIEW_COMMENT_BY_MEMBER": {}
                        },
                        "window": {
                            "type": "static",
                            "period": "weekly",
                            "initial": "2024-01-01"
                        }
                    }
                ]
            }
        ]
    }
}
